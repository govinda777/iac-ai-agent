# ============================================
# üöÄ IaC AI Agent - Docker Compose Produ√ß√£o
# ============================================
# 
# Configura√ß√£o completa para deploy de produ√ß√£o com:
# - Aplica√ß√£o principal
# - Nginx como reverse proxy
# - Redis para cache
# - Volumes persistentes
# - Health checks
# - Logs centralizados

version: '3.8'

services:
  # Redis para cache (sem depend√™ncias)
  redis:
    image: redis:7-alpine
    container_name: iac-ai-redis
    restart: unless-stopped
    
    # Comando com configura√ß√µes de produ√ß√£o
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    # Volumes
    volumes:
      - redis-data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Rede
    networks:
      - iac-ai-network
    
    # Recursos
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'
        reservations:
          memory: 128M
          cpus: '0.05'

  # Aplica√ß√£o principal
  iac-ai-agent:
    build:
      context: ..
      dockerfile: deployments/Dockerfile.prod
    image: iacai-agent:prod
    container_name: iac-ai-agent-prod
    restart: unless-stopped
    
    # Vari√°veis de ambiente
    env_file:
      - .env.prod
    
    # Portas
    expose:
      - "8080"
    
    # Volumes
    volumes:
      - app-data:/app/data
      - app-logs:/app/logs
      - app-tmp:/app/tmp
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Recursos
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    
    # Logs
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    # Rede
    networks:
      - iac-ai-network
    
    # Depend√™ncias
    depends_on:
      redis:
        condition: service_healthy

  # Nginx como reverse proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: iac-ai-nginx
    restart: unless-stopped
    
    # Portas
    ports:
      - "80:80"
      - "443:443"
    
    # Volumes
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    
    # Health check
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3
    
    # Rede
    networks:
      - iac-ai-network
    
    # Depend√™ncias
    depends_on:
      iac-ai-agent:
        condition: service_healthy

  # Monitoramento com Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: iac-ai-prometheus
    restart: unless-stopped
    
    # Portas
    ports:
      - "9090:9090"
    
    # Volumes
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    # Comando
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    
    # Rede
    networks:
      - iac-ai-network
    
    # Profiles para ativar apenas quando necess√°rio
    profiles:
      - monitoring

  # Grafana para visualiza√ß√£o (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: iac-ai-grafana
    restart: unless-stopped
    
    # Portas
    ports:
      - "3000:3000"
    
    # Vari√°veis de ambiente
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    
    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    # Rede
    networks:
      - iac-ai-network
    
    # Profiles para ativar apenas quando necess√°rio
    profiles:
      - monitoring

# Volumes persistentes
volumes:
  app-data:
    driver: local
  app-logs:
    driver: local
  app-tmp:
    driver: local
  redis-data:
    driver: local
  nginx-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Rede interna
networks:
  iac-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
